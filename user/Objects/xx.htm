<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Nov 21 14:29:52 2017
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CombineReset &rArr; Motor_Init_Motion &rArr; Motion_Output_Carbin &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">NMI_Handler</a><BR>
 <LI><a href="#[27]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">HardFault_Handler</a><BR>
 <LI><a href="#[28]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">MemManage_Handler</a><BR>
 <LI><a href="#[29]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">BusFault_Handler</a><BR>
 <LI><a href="#[2a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">UsageFault_Handler</a><BR>
 <LI><a href="#[2b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">SVC_Handler</a><BR>
 <LI><a href="#[2c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">DebugMon_Handler</a><BR>
 <LI><a href="#[2d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">PendSV_Handler</a><BR>
 <LI><a href="#[2e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">SysTick_Handler</a><BR>
 <LI><a href="#[41]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">ADC1_2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5e]">ADC3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[29]">BusFault_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[44]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[45]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3a]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3c]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3d]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[40]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[67]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[68]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[69]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6a]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2c]">DebugMon_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[35]">EXTI0_IRQHandler</a> from pct.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[57]">EXTI15_10_IRQHandler</a> from pct.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[36]">EXTI1_IRQHandler</a> from pct.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[37]">EXTI2_IRQHandler</a> from pct.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[38]">EXTI3_IRQHandler</a> from pct.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[39]">EXTI4_IRQHandler</a> from pct.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[46]">EXTI9_5_IRQHandler</a> from pct.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[33]">FLASH_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5f]">FSMC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4]">FingerOpen</a> from motiondispatch.o(i.FingerOpen) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[12]">Go_Cup_To_HatchIn</a> from motiondispatch.o(i.Go_Cup_To_HatchIn) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[13]">Go_Cup_To_HatchOut</a> from motiondispatch.o(i.Go_Cup_To_HatchOut) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[16]">Go_Cup_To_Mix</a> from motiondispatch.o(i.Go_Cup_To_Mix) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[14]">Go_Cup_To_Wast1</a> from motiondispatch.o(i.Go_Cup_To_Wast1) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[15]">Go_Cup_To_Wast2</a> from motiondispatch.o(i.Go_Cup_To_Wast2) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[c]">Go_Curr_To_CaptureCup</a> from motiondispatch.o(i.Go_Curr_To_CaptureCup) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[b]">Go_Curr_To_Origin</a> from motiondispatch.o(i.Go_Curr_To_Origin) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[1a]">Go_Hatch_To_CupDish</a> from motiondispatch.o(i.Go_Hatch_To_CupDish) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[1b]">Go_Hatch_To_Mix</a> from motiondispatch.o(i.Go_Hatch_To_Mix) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[1e]">Go_Hatch_To_Waste</a> from motiondispatch.o(i.Go_Hatch_To_Waste) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[22]">Go_Lock_Cabin</a> from motiondispatch.o(i.Go_Lock_Cabin) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[23]">Go_Mix_Running</a> from motiondispatch.o(i.Go_Mix_Running) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[1c]">Go_Mix_To_HatchIn</a> from motiondispatch.o(i.Go_Mix_To_HatchIn) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[1d]">Go_Mix_To_HatchOut</a> from motiondispatch.o(i.Go_Mix_To_HatchOut) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[17]">Go_Mix_To_Wast1</a> from motiondispatch.o(i.Go_Mix_To_Wast1) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[18]">Go_Mix_To_Wast2</a> from motiondispatch.o(i.Go_Mix_To_Wast2) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[21]">Go_Open_Cabin</a> from motiondispatch.o(i.Go_Open_Cabin) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[d]">Go_Orign_To_HatchIn</a> from motiondispatch.o(i.Go_Orign_To_HatchIn) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[e]">Go_Orign_To_HatchOut</a> from motiondispatch.o(i.Go_Orign_To_HatchOut) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[f]">Go_Orign_To_Mix</a> from motiondispatch.o(i.Go_Orign_To_Mix) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[10]">Go_Orign_To_Waste1</a> from motiondispatch.o(i.Go_Orign_To_Waste1) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[11]">Go_Orign_To_Waste2</a> from motiondispatch.o(i.Go_Orign_To_Waste2) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[19]">Go_Orign_To_Waste_Throw_Cup</a> from motiondispatch.o(i.Go_Orign_To_Waste_Throw_Cup) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[a]">Go_SendConfigPara</a> from motiondispatch.o(i.Go_SendConfigPara) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[9]">Go_SendStatusInfo</a> from motiondispatch.o(i.Go_SendStatusInfo) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[8]">Go_SysSoftwareVersionCheck</a> from motiondispatch.o(i.Go_SysSoftwareVersionCheck) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[24]">Go_Unload_Cup</a> from motiondispatch.o(i.Go_Unload_Cup) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[1f]">Go_Waste_To_HatchIn</a> from motiondispatch.o(i.Go_Waste_To_HatchIn) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[20]">Go_Waste_To_HatchOut</a> from motiondispatch.o(i.Go_Waste_To_HatchOut) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[27]">HardFault_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4f]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4e]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[51]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[50]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[28]">MemManage_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3]">MixMotor_ParaConfig</a> from motiondispatch.o(i.MixMotor_ParaConfig) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[7]">Mix_StartRun</a> from motiondispatch.o(i.Mix_StartRun) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[26]">NMI_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[30]">PVD_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2d]">PendSV_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[34]">RCC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[58]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[32]">RTC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[25]">Reset_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[60]">SDIO_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[52]">SPI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[53]">SPI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[62]">SPI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2b]">SVC_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2e]">SysTick_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[31]">TAMPER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[47]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4a]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[49]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[48]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4b]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4c]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4d]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[61]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[65]">TIM6_IRQHandler</a> from timer.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[66]">TIM7_IRQHandler</a> from timer.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5d]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5b]">TIM8_UP_TIM13_IRQHandler</a> from pct_encoder.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[63]">UART4_IRQHandler</a> from usart.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[64]">UART5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[54]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[55]">USART2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[56]">USART3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[59]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[42]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[43]">USB_LP_CAN1_RX0_IRQHandler</a> from can.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2a]">UsageFault_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2f]">WWDG_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6]">XY_To_WorkStation</a> from motiondispatch.o(i.XY_To_WorkStation) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[0]">X_MotorParaConfig</a> from motiondispatch.o(i.X_MotorParaConfig) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[1]">Y_MotorParaConfig</a> from motiondispatch.o(i.Y_MotorParaConfig) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[2]">Z_MotorParaConfig</a> from motiondispatch.o(i.Z_MotorParaConfig) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[5]">Z_To_WorkStation</a> from motiondispatch.o(i.Z_To_WorkStation) referenced 2 times from motiondispatch.o(.data)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[6e]">fputc</a> from usart.o(i.fputc) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[6b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[125]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[126]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[127]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[128]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[129]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Unpack
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Package
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportHardwaretatus
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Init
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ac]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>

<P><STRONG><a name="[ab]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupPosition
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMixMaxPoint
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMixMaxPoint
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupPosition
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMixMaxPoint
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMixMaxPoint
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupPosition
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupPosition
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMixMaxPoint
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupPosition
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMixMaxPoint
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMixMaxPoint
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[132]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[133]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[75]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[7d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[70]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[135]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>AT24CXX_Check</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, at24cxx.o(i.AT24CXX_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AT24CXX_Check &rArr; AT24CXX_ReadOneByte &rArr; IIC_EE_BufferRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[87]"></a>AT24CXX_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, at24cxx.o(i.AT24CXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AT24CXX_Init &rArr; IIC_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[8e]"></a>AT24CXX_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, at24cxx.o(i.AT24CXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AT24CXX_Read &rArr; AT24CXX_ReadLenByte &rArr; IIC_EE_BufferRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaInitConfig
</UL>

<P><STRONG><a name="[8f]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, at24cxx.o(i.AT24CXX_ReadLenByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24CXX_ReadLenByte &rArr; IIC_EE_BufferRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>

<P><STRONG><a name="[85]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, at24cxx.o(i.AT24CXX_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_EE_BufferRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[86]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at24cxx.o(i.AT24CXX_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_EE_ByteWrite &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_ByteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
</UL>

<P><STRONG><a name="[93]"></a>CAN1_Mode_Init</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, can.o(i.CAN1_Mode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CAN1_Mode_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Get_Local_ID
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Mode_Init
</UL>

<P><STRONG><a name="[97]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
</UL>

<P><STRONG><a name="[96]"></a>CAN_Get_Local_ID</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, can.o(i.CAN_Get_Local_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_Get_Local_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
</UL>

<P><STRONG><a name="[98]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
</UL>

<P><STRONG><a name="[95]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f10x_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
</UL>

<P><STRONG><a name="[9b]"></a>CAN_Mode_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, can.o(i.CAN_Mode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN_Mode_Init &rArr; CAN1_Mode_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[9c]"></a>CAN_Package</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, can.o(i.CAN_Package))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_Package
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>

<P><STRONG><a name="[118]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>CAN_Send_Msg</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, can.o(i.CAN_Send_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_Send_Msg &rArr; CAN_Package
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Package
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportHardwaretatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendWorkStationInfo
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>

<P><STRONG><a name="[9f]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>

<P><STRONG><a name="[a0]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_TransmitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TransmitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>

<P><STRONG><a name="[a1]"></a>CAN_Unpack</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, can.o(i.CAN_Unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_Unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>CRC16_1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crc16.o(i.CRC16_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16_1
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaInitConfig
</UL>

<P><STRONG><a name="[a2]"></a>CabinDisable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motiondispatch.o(i.CabinDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CabinDisable &rArr; CabinorEnable &rArr; EM_SW_OUT &rArr; EM_SW_OUT_H &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CabinorEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Open_Cabin
</UL>

<P><STRONG><a name="[a4]"></a>CabinEnable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motiondispatch.o(i.CabinEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CabinEnable &rArr; CabinorEnable &rArr; EM_SW_OUT &rArr; EM_SW_OUT_H &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CabinorEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Lock_Cabin
</UL>

<P><STRONG><a name="[a3]"></a>CabinorEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, motiondispatch.o(i.CabinorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CabinorEnable &rArr; EM_SW_OUT &rArr; EM_SW_OUT_H &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CabinEnable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CabinDisable
</UL>

<P><STRONG><a name="[a6]"></a>CalMixMaxPoint</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, motiondispatch.o(i.CalMixMaxPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CalMixMaxPoint &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaInitConfig
</UL>

<P><STRONG><a name="[11f]"></a>CalRouteTotalPulse</STRONG> (Thumb, 204 bytes, Stack size 28 bytes, motiondispatch.o(i.CalRouteTotalPulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CalRouteTotalPulse
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_To_WorkStation
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XY_To_WorkStation
</UL>

<P><STRONG><a name="[aa]"></a>CanSendData</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, motiondispatch.o(i.CanSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CanSendData &rArr; CAN_Send_Msg &rArr; CAN_Package
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_SysSoftwareVersionCheck
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FingerOpen
</UL>

<P><STRONG><a name="[ad]"></a>CanSendWorkStationInfo</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, motiondispatch.o(i.CanSendWorkStationInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CanSendWorkStationInfo &rArr; CAN_Send_Msg &rArr; CAN_Package
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_SendConfigPara
</UL>

<P><STRONG><a name="[ae]"></a>CombineReset</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, main_app.o(i.CombineReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CombineReset &rArr; Motor_Init_Motion &rArr; Motion_Output_Carbin &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init_Motion
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>CupCaptureStatusJudge</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, motiondispatch.o(i.CupCaptureStatusJudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CupCaptureStatusJudge &rArr; PCT_Get_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Get_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[107]"></a>CupDishPropertyConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, motiondispatch.o(i.CupDishPropertyConfig))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[b2]"></a>DRV8711_Dir_Forward</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv8711.o(i.DRV8711_Dir_Forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV8711_Dir_Forward &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
</UL>

<P><STRONG><a name="[b4]"></a>DRV8711_Dir_Invert</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv8711.o(i.DRV8711_Dir_Invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV8711_Dir_Invert &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[b5]"></a>DRV8711_Enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv8711.o(i.DRV8711_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Self_Lock
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Enable
</UL>

<P><STRONG><a name="[b7]"></a>DRV8711_Get_Index_Level</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv8711.o(i.DRV8711_Get_Index_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV8711_Get_Index_Level &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
</UL>

<P><STRONG><a name="[b8]"></a>DRV8711_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, drv8711.o(i.DRV8711_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV8711_Init &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[b9]"></a>DRV8711_Self_Lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv8711.o(i.DRV8711_Self_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DRV8711_Self_Lock &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Self_Lock
</UL>

<P><STRONG><a name="[b6]"></a>DRV8711_Set_Current</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, drv8711.o(i.DRV8711_Set_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Torque
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Gain
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Self_Lock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Enable
</UL>

<P><STRONG><a name="[bd]"></a>DRV8711_Set_Decay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv8711.o(i.DRV8711_Set_Decay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV8711_Set_Decay &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[ba]"></a>DRV8711_Set_Gain</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv8711.o(i.DRV8711_Set_Gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV8711_Set_Gain &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
</UL>

<P><STRONG><a name="[be]"></a>DRV8711_Set_Index_Level</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv8711.o(i.DRV8711_Set_Index_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV8711_Set_Index_Level &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[bc]"></a>DRV8711_Set_Torque</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv8711.o(i.DRV8711_Set_Torque))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV8711_Set_Torque &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
</UL>

<P><STRONG><a name="[fc]"></a>EM_SW_Get_Status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, em_sw.o(i.EM_SW_Get_Status))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaInitConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportHardwaretatus
</UL>

<P><STRONG><a name="[bf]"></a>EM_SW_Init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EM_SW_Init &rArr; TIM6_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[a5]"></a>EM_SW_OUT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, em_sw.o(i.EM_SW_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EM_SW_OUT &rArr; EM_SW_OUT_H &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_H
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_G
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_F
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_E
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_D
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_C
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_B
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_A
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CabinorEnable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Sw_Status
</UL>

<P><STRONG><a name="[c1]"></a>EM_SW_OUT_A</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_OUT_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_SW_OUT_A &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>

<P><STRONG><a name="[c2]"></a>EM_SW_OUT_B</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_OUT_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_SW_OUT_B &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>

<P><STRONG><a name="[c3]"></a>EM_SW_OUT_C</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_OUT_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_SW_OUT_C &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>

<P><STRONG><a name="[c9]"></a>EM_SW_OUT_COMMON_IO</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, em_sw.o(i.EM_SW_OUT_COMMON_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Set_IO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Reset_IO
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_H
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_G
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_F
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_E
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_D
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_C
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_B
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_A
</UL>

<P><STRONG><a name="[c4]"></a>EM_SW_OUT_D</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_OUT_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_SW_OUT_D &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>

<P><STRONG><a name="[c5]"></a>EM_SW_OUT_E</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_OUT_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_SW_OUT_E &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>

<P><STRONG><a name="[c6]"></a>EM_SW_OUT_F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_OUT_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_SW_OUT_F &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>

<P><STRONG><a name="[c7]"></a>EM_SW_OUT_G</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_OUT_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_SW_OUT_G &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>

<P><STRONG><a name="[c8]"></a>EM_SW_OUT_H</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_OUT_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_SW_OUT_H &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>

<P><STRONG><a name="[cb]"></a>EM_SW_Reset_IO</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_Reset_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EM_SW_Reset_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>EM_SW_Set_IO</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, em_sw.o(i.EM_SW_Set_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT_COMMON_IO
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pct.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, pct.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pct.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pct.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pct.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; PCT_4_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_4_Handle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pct.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; PCT_3_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_3_Handle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, pct.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler &rArr; PCT_2_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_2_Handle
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_1_Handle
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
</UL>

<P><STRONG><a name="[4]"></a>FingerOpen</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, motiondispatch.o(i.FingerOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FingerOpen &rArr; CanSendData &rArr; CAN_Send_Msg &rArr; CAN_Package
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Get_Status
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finger_Sw_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
</UL>

<P><STRONG><a name="[89]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[ef]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_4_Handle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_3_Handle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_2_Handle
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_1_Handle
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllPctStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Get_Status
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Get_Local_ID
</UL>

<P><STRONG><a name="[90]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Reset_IO
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Set_IO
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[d3]"></a>GetAllPctStatus</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pct_app.o(i.GetAllPctStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetAllPctStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaInitConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportHardwaretatus
</UL>

<P><STRONG><a name="[d5]"></a>GetCaptureCupOffset</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, motiondispatch.o(i.GetCaptureCupOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetCaptureCupOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Hatch_To_CupDish
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Curr_To_CaptureCup
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Cup_To_Wast2
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Cup_To_Wast1
</UL>

<P><STRONG><a name="[d4]"></a>GetCaptureCupPosition</STRONG> (Thumb, 1980 bytes, Stack size 56 bytes, motiondispatch.o(i.GetCaptureCupPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GetCaptureCupPosition &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Hatch_To_CupDish
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Curr_To_CaptureCup
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Cup_To_Wast2
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Cup_To_Wast1
</UL>

<P><STRONG><a name="[12]"></a>Go_Cup_To_HatchIn</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Cup_To_HatchIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Cup_To_HatchIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Go_Cup_To_HatchOut</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Cup_To_HatchOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Cup_To_HatchOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Go_Cup_To_Mix</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Cup_To_Mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Cup_To_Mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>Go_Cup_To_Wast1</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, motiondispatch.o(i.Go_Cup_To_Wast1))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Go_Cup_To_Wast1 &rArr; GetCaptureCupPosition &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupPosition
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupOffset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Go_Cup_To_Wast2</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, motiondispatch.o(i.Go_Cup_To_Wast2))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Go_Cup_To_Wast2 &rArr; GetCaptureCupPosition &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupPosition
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupOffset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Go_Curr_To_CaptureCup</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, motiondispatch.o(i.Go_Curr_To_CaptureCup))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Go_Curr_To_CaptureCup &rArr; GetCaptureCupPosition &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupPosition
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupOffset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Go_Curr_To_Origin</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Curr_To_Origin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Curr_To_Origin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>Go_Hatch_To_CupDish</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, motiondispatch.o(i.Go_Hatch_To_CupDish))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Go_Hatch_To_CupDish &rArr; GetCaptureCupPosition &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupPosition
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCaptureCupOffset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>Go_Hatch_To_Mix</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Hatch_To_Mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Hatch_To_Mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>Go_Hatch_To_Waste</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Hatch_To_Waste))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Hatch_To_Waste
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>Go_Lock_Cabin</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, motiondispatch.o(i.Go_Lock_Cabin))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Go_Lock_Cabin &rArr; CabinEnable &rArr; CabinorEnable &rArr; EM_SW_OUT &rArr; EM_SW_OUT_H &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CabinEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>Go_Mix_Running</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, motiondispatch.o(i.Go_Mix_Running))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Go_Mix_Running
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>Go_Mix_To_HatchIn</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Mix_To_HatchIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Mix_To_HatchIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>Go_Mix_To_HatchOut</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Mix_To_HatchOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Mix_To_HatchOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>Go_Mix_To_Wast1</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Mix_To_Wast1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Mix_To_Wast1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>Go_Mix_To_Wast2</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Mix_To_Wast2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Mix_To_Wast2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>Go_Open_Cabin</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, motiondispatch.o(i.Go_Open_Cabin))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Go_Open_Cabin &rArr; CabinDisable &rArr; CabinorEnable &rArr; EM_SW_OUT &rArr; EM_SW_OUT_H &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CabinDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Go_Orign_To_HatchIn</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Orign_To_HatchIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Orign_To_HatchIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Go_Orign_To_HatchOut</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Orign_To_HatchOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Orign_To_HatchOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Go_Orign_To_Mix</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Orign_To_Mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Orign_To_Mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Go_Orign_To_Waste1</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Orign_To_Waste1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Orign_To_Waste1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Go_Orign_To_Waste2</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Orign_To_Waste2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Orign_To_Waste2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>Go_Orign_To_Waste_Throw_Cup</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Orign_To_Waste_Throw_Cup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Orign_To_Waste_Throw_Cup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Go_SendConfigPara</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_SendConfigPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Go_SendConfigPara &rArr; CanSendWorkStationInfo &rArr; CAN_Send_Msg &rArr; CAN_Package
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendWorkStationInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Go_SendStatusInfo</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, motiondispatch.o(i.Go_SendStatusInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Go_SendStatusInfo &rArr; ReportHardwaretatus &rArr; CAN_Send_Msg &rArr; CAN_Package
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportHardwaretatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Go_SysSoftwareVersionCheck</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, motiondispatch.o(i.Go_SysSoftwareVersionCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Go_SysSoftwareVersionCheck &rArr; CanSendData &rArr; CAN_Send_Msg &rArr; CAN_Package
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>Go_Unload_Cup</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, motiondispatch.o(i.Go_Unload_Cup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Go_Unload_Cup
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>Go_Waste_To_HatchIn</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Waste_To_HatchIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Waste_To_HatchIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>Go_Waste_To_HatchOut</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, motiondispatch.o(i.Go_Waste_To_HatchOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Go_Waste_To_HatchOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>

<P><STRONG><a name="[db]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_ByteWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>

<P><STRONG><a name="[dd]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>

<P><STRONG><a name="[da]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_ByteWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>

<P><STRONG><a name="[e0]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_ByteWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>

<P><STRONG><a name="[d9]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>

<P><STRONG><a name="[d7]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[e1]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>

<P><STRONG><a name="[dc]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_ByteWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>

<P><STRONG><a name="[de]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_ByteWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_EE_BufferRead
</UL>

<P><STRONG><a name="[91]"></a>IIC_EE_BufferRead</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, iic.o(i.IIC_EE_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_EE_BufferRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
</UL>

<P><STRONG><a name="[92]"></a>IIC_EE_ByteWrite</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, iic.o(i.IIC_EE_ByteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_EE_ByteWrite &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[8b]"></a>IIC_Init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, iic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = IIC_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[e2]"></a>Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main_app.o(i.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Init &rArr; Motor_Init &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CabinorEnable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Mode_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>LED_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[3]"></a>MixMotor_ParaConfig</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, motiondispatch.o(i.MixMotor_ParaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MixMotor_ParaConfig &rArr; MotorMotionConfig_Init &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMotionConfig_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Mix_StartRun</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, motiondispatch.o(i.Mix_StartRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mix_StartRun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>Motion_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, main_app.o(i.Motion_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Motion_Init &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init_Motion
</UL>

<P><STRONG><a name="[ec]"></a>Motion_Init_Return</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, main_app.o(i.Motion_Init_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Motion_Init_Return &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init_Motion
</UL>

<P><STRONG><a name="[ed]"></a>Motion_Output_Carbin</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, main_app.o(i.Motion_Output_Carbin))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Motion_Output_Carbin &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init_Motion
</UL>

<P><STRONG><a name="[e9]"></a>MotorMotionConfig_Init</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, motiondispatch.o(i.MotorMotionConfig_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MotorMotionConfig_Init &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z_MotorParaConfig
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Y_MotorParaConfig
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X_MotorParaConfig
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixMotor_ParaConfig
</UL>

<P><STRONG><a name="[ee]"></a>Motor_Enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, step_motor.o(i.Motor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
</UL>

<P><STRONG><a name="[e8]"></a>Motor_Init</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, step_motor.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Motor_Init &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Index_Level
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Decay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Current
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Dir_Invert
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[af]"></a>Motor_Init_Motion</STRONG> (Thumb, 974 bytes, Stack size 24 bytes, main_app.o(i.Motor_Init_Motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Motor_Init_Motion &rArr; Motion_Output_Carbin &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Get_Status
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Output_Carbin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Init_Return
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CombineReset
</UL>

<P><STRONG><a name="[eb]"></a>Motor_Motion_Setup</STRONG> (Thumb, 774 bytes, Stack size 16 bytes, step_motor.o(i.Motor_Motion_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Get_Status
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Motor_Setup
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Encoder_Para_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Get_Index_Level
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Dir_Invert
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Dir_Forward
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Output_Carbin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Init_Return
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMotionConfig_Init
</UL>

<P><STRONG><a name="[f1]"></a>Motor_PWM_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, timer.o(i.Motor_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Motor_PWM_Init &rArr; Timer5_Pwm_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[f8]"></a>Motor_Self_Lock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, step_motor.o(i.Motor_Self_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Motor_Self_Lock &rArr; DRV8711_Self_Lock &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Self_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[e4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[d1]"></a>PCT_1_Handle</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pct_app.o(i.PCT_1_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCT_1_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>PCT_2_Handle</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pct_app.o(i.PCT_2_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCT_2_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>PCT_3_Handle</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pct_app.o(i.PCT_3_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCT_3_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>PCT_4_Handle</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, pct_app.o(i.PCT_4_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCT_4_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>PCT_Encoder_Para_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pct_encoder.o(i.PCT_Encoder_Para_Init))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
</UL>

<P><STRONG><a name="[b1]"></a>PCT_Get_Status</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, pct.o(i.PCT_Get_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCT_Get_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init_Motion
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FingerOpen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CupCaptureStatusJudge
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>PCT_Init</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, pct.o(i.PCT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PCT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[94]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[88]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[d8]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[d6]"></a>ReportHardwaretatus</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, motiondispatch.o(i.ReportHardwaretatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReportHardwaretatus &rArr; CAN_Send_Msg &rArr; CAN_Package
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllPctStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Get_Status
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Send_Msg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_SendStatusInfo
</UL>

<P><STRONG><a name="[f0]"></a>SPI1_Init</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, spi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[b3]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, spi.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Index_Level
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Decay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Get_Index_Level
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Dir_Invert
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Dir_Forward
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Torque
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV8711_Set_Gain
</UL>

<P><STRONG><a name="[fe]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[ff]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[101]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[100]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[fd]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[105]"></a>StartMotorParaInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motiondispatch.o(i.StartMotorParaInit))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[104]"></a>SysInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, motiondispatch.o(i.SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SysInit &rArr; SysParaInitConfig &rArr; AT24CXX_Read &rArr; AT24CXX_ReadLenByte &rArr; IIC_EE_BufferRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaInitConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotorParaInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CupDishPropertyConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CupCaptureStatusJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>SysParaInitConfig</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, motiondispatch.o(i.SysParaInitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysParaInitConfig &rArr; AT24CXX_Read &rArr; AT24CXX_ReadLenByte &rArr; IIC_EE_BufferRead &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_1
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllPctStatus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Get_Status
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalMixMaxPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[123]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM2_IRQHandler &rArr; Motor_Self_Lock &rArr; DRV8711_Self_Lock &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Get_Status
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Self_Lock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Motor_Setup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Disable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM3_IRQHandler &rArr; Motor_Self_Lock &rArr; DRV8711_Self_Lock &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Get_Status
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Self_Lock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Motor_Setup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Disable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM4_IRQHandler &rArr; Motor_Self_Lock &rArr; DRV8711_Self_Lock &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Get_Status
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Self_Lock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Motor_Setup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Disable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM5_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM5_IRQHandler &rArr; Motor_Self_Lock &rArr; DRV8711_Self_Lock &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_Get_Status
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Self_Lock
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Motor_Setup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Disable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM6_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, timer.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM6_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Disable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Set_IO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Reset_IO
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>TIM6_Init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timer.o(i.TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM6_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_Init
</UL>

<P><STRONG><a name="[66]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pct_encoder.o(i.TIM8_UP_TIM13_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[112]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_CCxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[10a]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Motor_Setup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Disable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[109]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[10f]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[110]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[113]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Motor_Setup
</UL>

<P><STRONG><a name="[114]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Motor_Setup
</UL>

<P><STRONG><a name="[10c]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Pwm_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Pwm_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Pwm_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Pwm_Init
</UL>

<P><STRONG><a name="[10b]"></a>TIMx_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i.TIMx_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMx_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>Timer2_Pwm_Init</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, timer.o(i.Timer2_Pwm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer2_Pwm_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[f5]"></a>Timer3_Pwm_Init</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, timer.o(i.Timer3_Pwm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer3_Pwm_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[f6]"></a>Timer4_Pwm_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, timer.o(i.Timer4_Pwm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer4_Pwm_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[f7]"></a>Timer5_Pwm_Init</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, timer.o(i.Timer5_Pwm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer5_Pwm_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[f3]"></a>Timer_Motor_Setup</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, timer.o(i.Timer_Motor_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer_Motor_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Motion_Setup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>UART4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART1_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
</UL>

<P><STRONG><a name="[119]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
</UL>

<P><STRONG><a name="[11e]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Data
</UL>

<P><STRONG><a name="[115]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
</UL>

<P><STRONG><a name="[117]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
</UL>

<P><STRONG><a name="[116]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Data
</UL>

<P><STRONG><a name="[43]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, can.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; CAN_Unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Unpack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>Usart1_Init</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, usart.o(i.Usart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Usart1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[11c]"></a>Usart1_Send_Data</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usart.o(i.Usart1_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart1_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>XY_To_WorkStation</STRONG> (Thumb, 620 bytes, Stack size 56 bytes, motiondispatch.o(i.XY_To_WorkStation))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = XY_To_WorkStation &rArr; CalRouteTotalPulse
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRouteTotalPulse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>X_MotorParaConfig</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, motiondispatch.o(i.X_MotorParaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = X_MotorParaConfig &rArr; MotorMotionConfig_Init &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMotionConfig_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>Y_MotorParaConfig</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, motiondispatch.o(i.Y_MotorParaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Y_MotorParaConfig &rArr; MotorMotionConfig_Init &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMotionConfig_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Z_MotorParaConfig</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, motiondispatch.o(i.Z_MotorParaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Z_MotorParaConfig &rArr; MotorMotionConfig_Init &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorMotionConfig_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Z_To_WorkStation</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, motiondispatch.o(i.Z_To_WorkStation))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Z_To_WorkStation &rArr; CalRouteTotalPulse
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRouteTotalPulse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motiondispatch.o(.data)
</UL>
<P><STRONG><a name="[120]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[138]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[8c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e3]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[8d]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init_Motion
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CombineReset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Mode_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Go_Unload_Cup
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FingerOpen
</UL>

<P><STRONG><a name="[f9]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_4_Handle
</UL>

<P><STRONG><a name="[6e]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; CombineReset &rArr; Motor_Init_Motion &rArr; Motion_Output_Carbin &rArr; Motor_Motion_Setup &rArr; Motor_Enable &rArr; DRV8711_Enable &rArr; DRV8711_Set_Current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Send_Data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CombineReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d2]"></a>Finger_Sw_Status</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, motiondispatch.o(i.Finger_Sw_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Finger_Sw_Status &rArr; EM_SW_OUT &rArr; EM_SW_OUT_H &rArr; EM_SW_OUT_COMMON_IO &rArr; EM_SW_Set_IO
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_SW_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FingerOpen
</UL>

<P><STRONG><a name="[102]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[103]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[121]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
